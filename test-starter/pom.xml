<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>gov.va.api.health</groupId>
    <artifactId>health-apis-parent</artifactId>
    <version>3.1.5-SNAPSHOT</version>
  </parent>
  <artifactId>test-starter</artifactId>
  <packaging>pom</packaging>
  <properties>
    <docker-maven-plugin.version>0.24.0</docker-maven-plugin.version>
    <docker.organization>vasdvp</docker.organization>
    <docker.tag>latest</docker.tag>
    <docker.imageName>health-apis-${project.artifactId}</docker.imageName>
    <jacoco.skip>true</jacoco.skip>
    <maven-shade-plugin.version>3.2.1</maven-shade-plugin.version>
    <process-exec-maven-plugin.version>0.7</process-exec-maven-plugin.version>
  </properties>
  <dependencies>
    <dependency>
      <groupId>gov.va.api.health</groupId>
      <artifactId>sentinel</artifactId>
      <version>3.1.5-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>gov.va.api.health</groupId>
      <artifactId>service-auto-config</artifactId>
      <version>3.1.5-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>compile</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-applications</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}</outputDirectory>
              <stripVersion>true</stripVersion>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!--
        Launch process for services
      -->
      <plugin>
        <groupId>com.bazaarvoice.maven.plugins</groupId>
        <artifactId>process-exec-maven-plugin</artifactId>
        <version>${process-exec-maven-plugin.version}</version>
        <executions/>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <profiles>
    <profile>
      <id>release</id>
      <build>
        <plugins>
          <!--
            Test Jar
          -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jar-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>test-jar</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>${maven-shade-plugin.version}</version>
            <executions>
              <execution>
                <phase>package</phase>
                <goals>
                  <goal>shade</goal>
                </goals>
                <configuration>
                  <createDependencyReducedPom>false</createDependencyReducedPom>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker-maven-plugin.version}</version>
            <configuration>
              <images>
                <image>
                  <name>${docker.organization}/${docker.imageName}</name>
                  <build>
                    <assembly>
                      <descriptor>assembly.xml</descriptor>
                      <targetDir>/sentinel</targetDir>
                    </assembly>
                    <dockerFile>${basedir}/src/main/docker/Dockerfile</dockerFile>
                    <tags>
                      <tag>${project.version}</tag>
                      <tag>${docker.tag}</tag>
                    </tags>
                  </build>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>build</id>
                <phase>package</phase>
                <goals>
                  <goal>build</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!--
      On Jenkins, the certificate password is provided by Jenkins credentials system and
      made available as the environment variable 'HEALTH_API_CERTIFICATE_PASSWORD'. This
      profile generates the 'config/secrets.properties' needed to launch the application.
    -->
    <profile>
      <id>jenkins-config</id>
      <activation>
        <property>
          <name>env.BUILD_ID</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>create-secrets-config</id>
                <phase>generate-test-resources</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${project.basedir}/config</outputDirectory>
                  <delimiters>
                    <delimiter>${*}</delimiter>
                  </delimiters>
                  <resources>
                    <resource>
                      <directory>src/test/config</directory>
                      <filtering>true</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
